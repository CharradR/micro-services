{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ManageBooksComponent = class ManageBooksComponent {\n  constructor(bookService) {\n    this.bookService = bookService;\n    this.editIndex = null;\n    this.formData = {\n      id: '',\n      title: '',\n      author: '',\n      category: '',\n      available: false,\n      quantity: 0\n    };\n    this.books = [];\n    this.isFormVisible = false;\n    this.isEditing = false;\n    this.searchTitle = '';\n  }\n  ngOnInit() {\n    this.bookService.getBooks().subscribe({\n      next: data => this.books = data,\n      error: err => console.error('Error fetching books:', err)\n    });\n  }\n  get filteredBooks() {\n    if (!this.searchTitle) {\n      return this.books;\n    }\n    const query = this.searchTitle.trim().toLowerCase();\n    return this.books.filter(book => book.title && book.title.toLowerCase().includes(query));\n  }\n  // ➕ Ajouter un livre\n  addBook() {\n    this.isFormVisible = true;\n    this.isEditing = false;\n    this.editIndex = null;\n    this.formData = {\n      id: '',\n      title: '',\n      author: '',\n      category: '',\n      available: false,\n      quantity: 0\n    };\n  }\n  // ✏️ Modifier un livre\n  editBook(book) {\n    this.isFormVisible = true;\n    this.isEditing = true;\n    this.formData = {\n      ...book\n    }; // copie TOUT, y compris id (même si on ne l'affiche pas)\n    this.editIndex = this.books.findIndex(b => b.id === book.id);\n  }\n  // 💾 Enregistrer (ajout ou modification)\n  saveBook() {\n    if (this.isEditing && this.formData.id) {\n      // mode édition\n      this.bookService.updateBook(this.formData.id, this.formData).subscribe({\n        next: updated => {\n          if (this.editIndex !== null) {\n            this.books[this.editIndex] = updated;\n          }\n          this.isFormVisible = false;\n        },\n        error: err => console.error('Failed to update book:', err)\n      });\n    } else {\n      // mode ajout\n      this.bookService.addBook(this.formData).subscribe({\n        next: created => {\n          this.books.push(created);\n          this.isFormVisible = false;\n        },\n        error: err => console.error('Failed to add book:', err)\n      });\n    }\n  }\n  // ❌ Supprimer un livre\n  deleteBook(book) {\n    if (book.id && confirm(`Are you sure you want to delete \"${book.title}\"?`)) {\n      this.bookService.deleteBook(book.id).subscribe({\n        next: () => {\n          this.books = this.books.filter(b => b.id !== book.id);\n        },\n        error: err => console.error('Failed to delete book:', err)\n      });\n    }\n  }\n  // 🔙 Annuler formulaire\n  cancelForm() {\n    this.isFormVisible = false;\n  }\n};\nManageBooksComponent = __decorate([Component({\n  selector: 'app-manage-books',\n  templateUrl: './manage-books.component.html',\n  styleUrls: ['./manage-books.component.css']\n})], ManageBooksComponent);\nexport { ManageBooksComponent };","map":{"version":3,"mappings":"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","names":["Component","ManageBooksComponent","constructor","bookService","id","title","author","category","available","quantity","ngOnInit","getBooks","subscribe","next","data","books","error","err","console","filteredBooks","searchTitle","query","trim","toLowerCase","filter","book","includes","addBook","isFormVisible","isEditing","editIndex","formData","editBook","findIndex","b","saveBook","updateBook","updated","created","push","deleteBook","confirm","cancelForm","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\donia\\Desktop\\micro-services\\educationProject\\src\\app\\components\\manage-books\\manage-books.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-manage-books',\n  templateUrl: './manage-books.component.html',\n  styleUrls: ['./manage-books.component.css']\n})\nexport class ManageBooksComponent {\n editIndex: number | null = null;\n\n  formData: Book = {\n    id: '',\n    title: '',\n    author: '',\n    category: '',\n    available: false,\n    quantity: 0,\n  };\n  books: Book[] = [];\n  constructor(private bookService: BookService) { }\n  isFormVisible = false;\n  isEditing = false;\n  searchTitle = '';\n\n  ngOnInit(): void {\n    this.bookService.getBooks().subscribe({\n      next: data => (this.books = data),\n      error: err => console.error('Error fetching books:', err)\n    });\n  }\n  get filteredBooks(): Book[] {\n    if (!this.searchTitle) {\n      return this.books;\n    }\n    const query = this.searchTitle.trim().toLowerCase();\n    return this.books.filter(book =>\n      book.title && book.title.toLowerCase().includes(query)\n    );\n\n  }\n\n  // ➕ Ajouter un livre\n  addBook(): void {\n    this.isFormVisible = true;\n    this.isEditing = false;\n    this.editIndex = null;\n    this.formData = {\n      id: '',\n      title: '',\n      author: '',\n      category: '',\n      available: false,\n      quantity: 0\n    };\n  }\n\n  // ✏️ Modifier un livre\n  editBook(book: Book): void {\n    this.isFormVisible = true;\n    this.isEditing = true;\n    this.formData = { ...book }; // copie TOUT, y compris id (même si on ne l'affiche pas)\n    this.editIndex = this.books.findIndex(b => b.id === book.id);\n  }\n\n\n  // 💾 Enregistrer (ajout ou modification)\n  saveBook(): void {\n    if (this.isEditing && this.formData.id) {\n      // mode édition\n      this.bookService.updateBook(this.formData.id, this.formData).subscribe({\n        next: updated => {\n          if (this.editIndex !== null) {\n            this.books[this.editIndex] = updated;\n          }\n          this.isFormVisible = false;\n        },\n        error: err => console.error('Failed to update book:', err)\n      });\n    } else {\n      // mode ajout\n      this.bookService.addBook(this.formData).subscribe({\n        next: created => {\n          this.books.push(created);\n          this.isFormVisible = false;\n        },\n        error: err => console.error('Failed to add book:', err)\n      });\n    }\n  }\n\n  // ❌ Supprimer un livre\n  deleteBook(book: Book): void {\n    if (book.id && confirm(`Are you sure you want to delete \"${book.title}\"?`)) {\n      this.bookService.deleteBook(book.id).subscribe({\n        next: () => {\n          this.books = this.books.filter(b => b.id !== book.id);\n        },\n        error: err => console.error('Failed to delete book:', err)\n      });\n    }\n  }\n\n  // 🔙 Annuler formulaire\n  cancelForm(): void {\n    this.isFormVisible = false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}