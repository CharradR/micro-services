{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, keycloakService, router, route) {\n    this.formBuilder = formBuilder;\n    this.keycloakService = keycloakService;\n    this.router = router;\n    this.route = route;\n    this.isLoading = false;\n    this.errorMessage = '';\n    this.userProfile = null;\n    this.returnUrl = '';\n  }\n  ngOnInit() {\n    // Initialize Keycloak service first\n    this.keycloakService.init();\n    this.loginForm = this.formBuilder.group({\n      username: [\"\", [Validators.required, Validators.minLength(3)]],\n      password: [\"\", [Validators.required, Validators.minLength(6), Validators.maxLength(50)]]\n    });\n    // Check if already authenticated\n    this.keycloakService.userProfile$.subscribe(profile => {\n      this.userProfile = profile;\n      if (profile) {\n        // Already logged in, redirect to home or return URL\n        this.router.navigate([this.returnUrl]);\n      }\n    });\n  }\n  /**\r\n   * Login using Keycloak OAuth2 flow (redirect to Keycloak)\r\n   */\n  login() {\n    console.log('Redirecting to Keycloak login...');\n    this.keycloakService.login();\n  }\n  /**\r\n   * Alternative: Manual login (for testing only - not recommended for production)\r\n   */\n  manualLogin() {\n    console.log(\"Manual login attempted - redirecting to OAuth flow instead\");\n    this.login();\n  }\n  signup() {\n    console.log(\"Here Object Signup\", this.loginForm.value);\n    // You can add signup logic here or navigate to signup page\n    this.router.navigate(['/signup']);\n  }\n  logout() {\n    this.keycloakService.logout().subscribe(() => {\n      this.userProfile = null;\n      this.loginForm.reset();\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAOzBC,YACUC,WAAwB,EACxBC,eAAgC,EAChCC,MAAc,EACdC,KAAqB;IAHrB,gBAAW,GAAXH,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IATf,cAAS,GAAG,KAAK;IACjB,iBAAY,GAAG,EAAE;IACjB,gBAAW,GAAuB,IAAI;IACtC,cAAS,GAAG,EAAE;EAOV;EAEJC,QAAQ;IACN;IACA,IAAI,CAACH,eAAe,CAACI,IAAI,EAAE;IAE3B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EAAEb,UAAU,CAACe,SAAS,CAAC,EAAE,CAAC,CAAC;KACxF,CAAC;IAEF;IACA,IAAI,CAACX,eAAe,CAACY,YAAY,CAACC,SAAS,CAACC,OAAO,IAAG;MACpD,IAAI,CAACC,WAAW,GAAGD,OAAO;MAC1B,IAAIA,OAAO,EAAE;QACX;QACA,IAAI,CAACb,MAAM,CAACe,QAAQ,CAAC,CAAC,IAAI,CAACC,SAAS,CAAC,CAAC;;IAE1C,CAAC,CAAC;EACJ;EAEA;;;EAGAC,KAAK;IACHC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,IAAI,CAACpB,eAAe,CAACkB,KAAK,EAAE;EAC9B;EAEA;;;EAGAG,WAAW;IACTF,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;IACzE,IAAI,CAACF,KAAK,EAAE;EACd;EAEAI,MAAM;IACJH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACf,SAAS,CAACkB,KAAK,CAAC;IACvD;IACA,IAAI,CAACtB,MAAM,CAACe,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;EACnC;EAEAQ,MAAM;IACJ,IAAI,CAACxB,eAAe,CAACwB,MAAM,EAAE,CAACX,SAAS,CAAC,MAAK;MAC3C,IAAI,CAACE,WAAW,GAAG,IAAI;MACvB,IAAI,CAACV,SAAS,CAACoB,KAAK,EAAE;IACxB,CAAC,CAAC;EACJ;CACD;AA7DY5B,cAAc,eAN1BF,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GAEW/B,cAAc,CA6D1B;SA7DYA,cAAc","names":["Component","Validators","LoginComponent","constructor","formBuilder","keycloakService","router","route","ngOnInit","init","loginForm","group","username","required","minLength","password","maxLength","userProfile$","subscribe","profile","userProfile","navigate","returnUrl","login","console","log","manualLogin","signup","value","logout","reset","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\donia\\Desktop\\micro-services\\educationProject\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { KeycloakService, UserProfile } from '../../services/keycloak.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  isLoading = false;\n  errorMessage = '';\n  userProfile: UserProfile | null = null;\n  returnUrl = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private keycloakService: KeycloakService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    // Initialize Keycloak service first\n    this.keycloakService.init();\n\n    this.loginForm = this.formBuilder.group({\n      username: [\"\", [Validators.required, Validators.minLength(3)]],\n      password: [\"\", [Validators.required, Validators.minLength(6), Validators.maxLength(50)]],\n    });\n\n    // Check if already authenticated\n    this.keycloakService.userProfile$.subscribe(profile => {\n      this.userProfile = profile;\n      if (profile) {\n        // Already logged in, redirect to home or return URL\n        this.router.navigate([this.returnUrl]);\n      }\n    });\n  }\n\n  /**\n   * Login using Keycloak OAuth2 flow (redirect to Keycloak)\n   */\n  login() {\n    console.log('Redirecting to Keycloak login...');\n    this.keycloakService.login();\n  }\n\n  /**\n   * Alternative: Manual login (for testing only - not recommended for production)\n   */\n  manualLogin() {\n    console.log(\"Manual login attempted - redirecting to OAuth flow instead\");\n    this.login();\n  }\n\n  signup() {\n    console.log(\"Here Object Signup\", this.loginForm.value);\n    // You can add signup logic here or navigate to signup page\n    this.router.navigate(['/signup']);\n  }\n\n  logout() {\n    this.keycloakService.logout().subscribe(() => {\n      this.userProfile = null;\n      this.loginForm.reset();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}