version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: library-service
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # MySQL Database for User Service
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: user_db
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5

 
  # Eureka Server - Service Discovery
  eureka-server:
    build: ./Eureka
    container_name: eureka-server
    restart: unless-stopped
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Config Server
  config-server:
    build:
      context: ./ServerConfig
      dockerfile: Dockerfile
    container_name: config-server
    restart: unless-stopped
    ports:
      - "8889:8889"
    environment:
      - SPRING_APPLICATION_NAME=ServerConfig
      - SERVER_PORT=8889
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS=classpath:/config/
      - DB_PASSWORD=
      - GMAIL_USERNAME=raed.charrad91@gmail.com
      - GMAIL_PASSWORD=sbgo jgya ejct iciq
    volumes:
      - ./ServerConfig/config:/config
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8889/actuator/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s




  # Keycloak - Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.0
    container_name: keycloak
    command: start-dev
    ports:
      - "8084:8080"  # External : Internal
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n' >&3 && timeout 5 cat <&3 | grep -q '200 OK'" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 120s


    networks:
      - microservices-network




    # Library Service - Business Microservice
  library-service:
    build:
      context: ./LibraryService
      dockerfile: Dockerfile
    container_name: library-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://root:rootpassword@mongodb:27017/librarydb
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8889
    depends_on:
      mongodb:
        condition: service_started
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - microservices-network


  # User Service - User Management Microservice
#  user-service:
#    build:
#      context: ./User
#      dockerfile: Dockerfile
#    container_name: user-service
#    restart: unless-stopped
#    ports:
#      - "8082:8082"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/user_db?createDatabaseIfNotExist=true
#      - SPRING_DATASOURCE_USERNAME=root
#      - SPRING_DATASOURCE_PASSWORD=rootpassword
#      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
#      - SPRING_CLOUD_CONFIG_URI=http://config-server:8889
#      - APP_JWT_SECRET=yourSecretKeyHere
#      - APP_JWT_EXPIRATION_MS=86400000
#    depends_on:
#      mysql:
#        condition: service_healthy
#      eureka-server:
#        condition: service_healthy
#      config-server:
#        condition: service_healthy
#    networks:
#      - microservices-network
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
#      interval: 15s
#      timeout: 5s
#      retries: 5
#      start_period: 40s



  # API Gateway - Entry point for all requests
  gateway:
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    container_name: gateway
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8889
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/LibraryKeyClock
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/LibraryKeyClock/protocol/openid-connect/certs
    depends_on:
      eureka-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      config-server:
        condition: service_healthy
      library-service:
        condition: service_healthy
#      user-service:
#        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Angular Frontend
  education-frontend:
     build:
       context: ./EducationProject
       dockerfile: Dockerfile
     container_name: education-frontend
     restart: unless-stopped
     ports:
       - "4200:80"
     environment:
       - API_URL=http://gateway:8083
     depends_on:
       gateway:
         condition: service_healthy
     networks:
       - microservices-network

volumes:
  mongodb_data:
    driver: local
  mysql_data:
    driver: local
  keycloak_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
